name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  # Check if user is authorized to trigger Claude
  check-auth:
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.auth.outputs.authorized }}
      has-trigger: ${{ steps.trigger.outputs.has-trigger }}
    steps:
      - name: Check authorization
        id: auth
        run: |
          if [[ "${{ github.actor }}" == "bborbe" ]]; then
            echo "authorized=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          case "${{ github.event_name }}" in
            "pull_request_review_comment"|"pull_request_review")
              association="${{ github.event.pull_request.author_association }}"
              ;;
            "issue_comment"|"issues")
              association="${{ github.event.issue.author_association }}"
              ;;
            *)
              association=""
              ;;
          esac
          
          if [[ "$association" == "COLLABORATOR" || "$association" == "MEMBER" || "$association" == "OWNER" ]]; then
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check trigger phrase
        id: trigger
        run: |
          case "${{ github.event_name }}" in
            "issue_comment"|"pull_request_review_comment")
              if [[ "${{ contains(github.event.comment.body, '@claude') }}" == "true" ]]; then
                echo "has-trigger=true" >> $GITHUB_OUTPUT
              else
                echo "has-trigger=false" >> $GITHUB_OUTPUT
              fi
              ;;
            "pull_request_review")
              if [[ "${{ contains(github.event.review.body, '@claude') }}" == "true" ]]; then
                echo "has-trigger=true" >> $GITHUB_OUTPUT
              else
                echo "has-trigger=false" >> $GITHUB_OUTPUT
              fi
              ;;
            "issues")
              if [[ "${{ contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude') }}" == "true" ]]; then
                echo "has-trigger=true" >> $GITHUB_OUTPUT
              else
                echo "has-trigger=false" >> $GITHUB_OUTPUT
              fi
              ;;
            *)
              echo "has-trigger=false" >> $GITHUB_OUTPUT
              ;;
          esac

  claude:
    needs: check-auth
    if: needs.check-auth.outputs.authorized == 'true' && needs.check-auth.outputs.has-trigger == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
            
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"

          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files

          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

